---
http_interactions:
- request:
    method: get
    uri: https://api.labs.cognitive.microsoft.com/academic/v1.0/evaluate?attributes=Ti,AA.AuN,Y,D,RId,E&count=1&expr=W%20==%20%27internet%27&model=latest&offset=0
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Ocp-Apim-Subscription-Key:
      - NO_TOKEN
  response:
    status:
      code: 401
      message: Access Denied
    headers:
      Content-Length:
      - '198'
      Content-Type:
      - application/json
      Www-Authenticate:
      - AzureApiManagementKey realm="https://api.labs.cognitive.microsoft.com/academic/v1.0",name="Ocp-Apim-Subscription-Key",type="header"
      Date:
      - Thu, 25 Oct 2018 10:07:41 GMT
    body:
      encoding: UTF-8
      string: "\n{\"error\":{\"code\":\"Unspecified\",\"message\":\"Access denied
        due to invalid subscription key. Make sure you are subscribed to an API you
        are trying to call and provide the right key.\"}}\n                "
    http_version: 
  recorded_at: Thu, 25 Oct 2018 10:07:41 GMT
- request:
    method: get
    uri: https://api.labs.cognitive.microsoft.com/academic/v1.0/evaluate?attributes=Ti,AA.AuN,Y,D,RId,E&count=1&expr=W%20==%20%27internet%27&model=latest&offset=0
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Ocp-Apim-Subscription-Key:
      - "<MS_TOKEN>"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Length:
      - '10858'
      Content-Type:
      - application/json
      Access-Control-Allow-Origin:
      - "*"
      Request-Context:
      - appId=cid-v1:7cd06f0e-6d73-46a5-9c10-4ebe681d0156
      X-Powered-By:
      - ASP.NET
      Date:
      - Thu, 25 Oct 2018 10:07:41 GMT
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Thu, 25 Oct 2018 10:07:42 GMT
- request:
    method: get
    uri: https://api.labs.cognitive.microsoft.com/academic/v1.0/evaluate?attributes=Ti,AA.AuN,Y,D,RId,E&count=-5&expr=W%20==%20%27internet%27&model=latest&offset=0
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Ocp-Apim-Subscription-Key:
      - "<MS_TOKEN>"
  response:
    status:
      code: 400
      message: Bad Request
    headers:
      Content-Length:
      - '66'
      Content-Type:
      - application/json
      Access-Control-Allow-Origin:
      - "*"
      Request-Context:
      - appId=cid-v1:7cd06f0e-6d73-46a5-9c10-4ebe681d0156
      X-Powered-By:
      - ASP.NET
      Date:
      - Thu, 25 Oct 2018 10:07:43 GMT
    body:
      encoding: UTF-8
      string: '{"Error":{"Code":"Bad Argument","Message":"count should be >= 0"}}'
    http_version: 
  recorded_at: Thu, 25 Oct 2018 10:07:43 GMT
- request:
    method: get
    uri: https://api.labs.cognitive.microsoft.com/academic/v1.0/evaluate?attributes=Ti,AA.AuN,Y,D,F.FN,E&count=1&expr=W%20==%20%27internet%27&model=latest&offset=0
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Ocp-Apim-Subscription-Key:
      - "<MS_TOKEN>"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Length:
      - '10795'
      Content-Type:
      - application/json
      Access-Control-Allow-Origin:
      - "*"
      Request-Context:
      - appId=cid-v1:7cd06f0e-6d73-46a5-9c10-4ebe681d0156
      X-Powered-By:
      - ASP.NET
      Date:
      - Wed, 31 Oct 2018 06:04:16 GMT
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 31 Oct 2018 05:57:06 GMT
- request:
    method: get
    uri: https://api.labs.cognitive.microsoft.com/academic/v1.0/evaluate?attributes=Ti,AA.AuN,Y,D,F.FN,E&count=1&expr=W%20==%20%27internet%27&model=latest&offset=0
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Ocp-Apim-Subscription-Key:
      - NO_TOKEN
  response:
    status:
      code: 401
      message: Access Denied
    headers:
      Content-Length:
      - '198'
      Content-Type:
      - application/json
      Www-Authenticate:
      - AzureApiManagementKey realm="https://api.labs.cognitive.microsoft.com/academic/v1.0",name="Ocp-Apim-Subscription-Key",type="header"
      Date:
      - Wed, 31 Oct 2018 06:04:17 GMT
    body:
      encoding: UTF-8
      string: "\n{\"error\":{\"code\":\"Unspecified\",\"message\":\"Access denied
        due to invalid subscription key. Make sure you are subscribed to an API you
        are trying to call and provide the right key.\"}}\n                "
    http_version: 
  recorded_at: Wed, 31 Oct 2018 05:57:07 GMT
- request:
    method: get
    uri: https://api.labs.cognitive.microsoft.com/academic/v1.0/evaluate?attributes=Ti,AA.AuN,Y,D,F.FN,E&count=-5&expr=W%20==%20%27internet%27&model=latest&offset=0
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Ocp-Apim-Subscription-Key:
      - "<MS_TOKEN>"
  response:
    status:
      code: 400
      message: Bad Request
    headers:
      Content-Length:
      - '66'
      Content-Type:
      - application/json
      Access-Control-Allow-Origin:
      - "*"
      Request-Context:
      - appId=cid-v1:7cd06f0e-6d73-46a5-9c10-4ebe681d0156
      X-Powered-By:
      - ASP.NET
      Date:
      - Wed, 31 Oct 2018 06:04:18 GMT
    body:
      encoding: UTF-8
      string: '{"Error":{"Code":"Bad Argument","Message":"count should be >= 0"}}'
    http_version: 
  recorded_at: Wed, 31 Oct 2018 05:57:08 GMT
- request:
    method: get
    uri: https://api.labs.cognitive.microsoft.com/academic/v1.0/evaluate?attributes=Ti,AA.AuN,Y,D,F.FN,E&count=10&expr=W%20==%20%27internet%27&model=latest&offset=0
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Ocp-Apim-Subscription-Key:
      - "<MS_TOKEN>"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Length:
      - '84965'
      Content-Type:
      - application/json
      Access-Control-Allow-Origin:
      - "*"
      Request-Context:
      - appId=cid-v1:7cd06f0e-6d73-46a5-9c10-4ebe681d0156
      X-Powered-By:
      - ASP.NET
      Date:
      - Wed, 31 Oct 2018 11:14:19 GMT
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 31 Oct 2018 11:14:18 GMT
- request:
    method: get
    uri: https://api.labs.cognitive.microsoft.com/academic/v1.0/evaluate?attributes=Ti,AA.AuN,Y,D,F.FN,E&count=10&expr=W%20==%20%27internet%27&model=latest&offset=0
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Ocp-Apim-Subscription-Key:
      - NO_TOKEN
  response:
    status:
      code: 401
      message: Access Denied
    headers:
      Content-Length:
      - '198'
      Content-Type:
      - application/json
      Www-Authenticate:
      - AzureApiManagementKey realm="https://api.labs.cognitive.microsoft.com/academic/v1.0",name="Ocp-Apim-Subscription-Key",type="header"
      Date:
      - Wed, 31 Oct 2018 11:14:20 GMT
    body:
      encoding: UTF-8
      string: "\n{\"error\":{\"code\":\"Unspecified\",\"message\":\"Access denied
        due to invalid subscription key. Make sure you are subscribed to an API you
        are trying to call and provide the right key.\"}}\n                "
    http_version: 
  recorded_at: Wed, 31 Oct 2018 11:14:19 GMT
- request:
    method: get
    uri: https://api.labs.cognitive.microsoft.com/academic/v1.0/evaluate?attributes=Id,Ti,AA.AuN,Y,D,F.FN,E,RId&count=20&expr=W%20==%20%27internet%27&model=latest&offset=0
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Ocp-Apim-Subscription-Key:
      - "<MS_TOKEN>"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Length:
      - '281529'
      Content-Type:
      - application/json
      Access-Control-Allow-Origin:
      - "*"
      Request-Context:
      - appId=cid-v1:7cd06f0e-6d73-46a5-9c10-4ebe681d0156
      X-Powered-By:
      - ASP.NET
      Date:
      - Thu, 15 Nov 2018 16:33:54 GMT
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Thu, 15 Nov 2018 16:33:53 GMT
- request:
    method: get
    uri: https://api.labs.cognitive.microsoft.com/academic/v1.0/evaluate?attributes=Id,Ti,AA.AuN,Y,D,F.FN,E,RId&expr=Id=2118428193&model=latest&offset=0
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Ocp-Apim-Subscription-Key:
      - "<MS_TOKEN>"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Length:
      - '11168'
      Content-Type:
      - application/json
      Access-Control-Allow-Origin:
      - "*"
      Request-Context:
      - appId=cid-v1:7cd06f0e-6d73-46a5-9c10-4ebe681d0156
      X-Powered-By:
      - ASP.NET
      Date:
      - Thu, 15 Nov 2018 16:35:21 GMT
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Thu, 15 Nov 2018 16:35:19 GMT
- request:
    method: get
    uri: https://api.labs.cognitive.microsoft.com/academic/v1.0/evaluate?attributes=Id,Ti,AA.AuN,Y,D,F.FN,E,RId,CC&count=100&expr=Or(Id=2158049821,%20Id=2158049821,%20Id=2163059190,%20Id=2167898414,%20Id=1650675509,%20Id=2104210894,%20Id=2174507869,%20Id=2164192722,%20Id=2144553078,%20Id=2150676586,%20Id=1663493649,%20Id=1584635459,%20Id=2020765652,%20Id=2000876023,%20Id=79931031,%20Id=2120626294,%20Id=2168886131,%20Id=74449473,%20Id=2064360543,%20Id=95432149,%20Id=105601597,%20Id=2108824004,%20Id=1725414206,%20Id=1528545897,%20Id=1494946454,%20Id=1815769434,%20Id=2127555143,%20Id=2052207834,%20Id=2170756028,%20Id=2122269925,%20Id=1799338429,%20Id=65351094,%20Id=203569915,%20Id=1597967544,%20Id=2227895079)&model=latest&offset=0
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Ocp-Apim-Subscription-Key:
      - "<MS_TOKEN>"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Length:
      - '235454'
      Content-Type:
      - application/json
      Access-Control-Allow-Origin:
      - "*"
      Request-Context:
      - appId=cid-v1:7cd06f0e-6d73-46a5-9c10-4ebe681d0156
      X-Powered-By:
      - ASP.NET
      Date:
      - Thu, 15 Nov 2018 16:35:21 GMT
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Thu, 15 Nov 2018 16:35:20 GMT
recorded_with: VCR 4.0.0
